/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.agunus.coinywise.api;

import com.agunus.coinywise.model.User;
import com.agunus.coinywise.model.UserList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-09T07:04:38.204816Z[Etc/UTC]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /users : 会員一覧取得
     * 会員一覧の取得 
     *
     * @return ok (status code 200)
     */
    @Operation(
        operationId = "usersGet",
        summary = "会員一覧取得",
        tags = { "会員" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserList.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<UserList> usersGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"name\" : \"山田 太郎\", \"nickname\" : \"あっくん\", \"id\" : \"IFHJKASDAOISUFIUEAD\", \"email\" : \"test@gmail.com\" }, { \"name\" : \"山田 太郎\", \"nickname\" : \"あっくん\", \"id\" : \"IFHJKASDAOISUFIUEAD\", \"email\" : \"test@gmail.com\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{id} : 指定IDの会員データ削除
     *
     * @param id 会員ID (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "usersIdDelete",
        summary = "指定IDの会員データ削除",
        tags = { "会員" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> usersIdDelete(
        @Parameter(name = "id", description = "会員ID", required = true) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"山田 太郎\", \"nickname\" : \"あっくん\", \"id\" : \"IFHJKASDAOISUFIUEAD\", \"email\" : \"test@gmail.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{id} : 会員データ取得
     *
     * @param id 会員ID (required)
     * @return ok (status code 200)
     */
    @Operation(
        operationId = "usersIdGet",
        summary = "会員データ取得",
        tags = { "会員" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> usersIdGet(
        @Parameter(name = "id", description = "会員ID", required = true) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"山田 太郎\", \"nickname\" : \"あっくん\", \"id\" : \"IFHJKASDAOISUFIUEAD\", \"email\" : \"test@gmail.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /users/{id} : 指定IDの会員データ更新
     *
     * @param id 会員ID (required)
     * @param user  (required)
     * @return ok (status code 200)
     */
    @Operation(
        operationId = "usersIdPatch",
        summary = "指定IDの会員データ更新",
        tags = { "会員" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> usersIdPatch(
        @Parameter(name = "id", description = "会員ID", required = true) @PathVariable("id") String id,
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"山田 太郎\", \"nickname\" : \"あっくん\", \"id\" : \"IFHJKASDAOISUFIUEAD\", \"email\" : \"test@gmail.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : 会員登録
     * 会員の登録を行うことができる。 
     *
     * @param body  (optional)
     * @return 会員登録成功 (status code 201)
     */
    @Operation(
        operationId = "usersPost",
        summary = "会員登録",
        tags = { "会員" },
        responses = {
            @ApiResponse(responseCode = "201", description = "会員登録成功")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> usersPost(
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
